// A wrapper for the torch script which:
//   - merges stdout, stderr
//   - receives some commands and uploads intermediate data
var spawn = require('child_process').spawn,
    fs = require('fs'),
    log = console.error,
    logger = {};

// Create the stderr only logger
['error', 'warn', 'info', 'log', 'debug'].forEach(method => logger[method] = log);

// Get the BlobClient...
var COMMAND_PREFIX = '<%= START_CMD %>',
    IMAGE = '<%= IMAGE %>',
    requirejs = require('webgme').requirejs,
    remainingImageCount = 0,
    exitCode = null;

requirejs([
    'blob/BlobClient'
], function(
    BlobClient
) {
    var url = process.env.ORIGIN_URL || 'http://127.0.0.1:8888',
        protocol = url.split('://').shift(),
        address,
        port = (url.split(':') || ['80']).pop();

    address = url.replace(protocol + '://', '')
        .replace(':' + port, '');

    var blobClient = new BlobClient({
        server: address,
        httpsecure: protocol === 'https',
        serverPort: port,
        logger: logger
    });

    var checkFinished = () => {
        if (exitCode !== null && remainingImageCount === 0) {
            log('finished!');
            process.exit(exitCode);
        }
    };

    var uploadImage = function(line) {
        var args = line.split(/\s+/),
            name = args.slice(2).join(' ').replace(/\s+$/, ''),
            filename = 'metadata/' + name + '.png';

        // Upload the image from metadata/
        remainingImageCount++;
        fs.readFile(filename, (err, content) => {
            if (err) {
                console.error(`Could not read ${filename}: ${err}`);
                return;
            }

            // Add hash to the image command
            log('about to putFile', filename);
            blobClient.putFile(filename, content)
                .then(hash => {
                    args.splice(2, 0, hash);
                    console.log(args.join(' '));
                    log('printing cmd:', args.join(' '));
                    --remainingImageCount;
                    log('finished uploading ' + filename + ' ' + remainingImageCount + ' remain');
                    checkFinished();
                })
                .fail(err => console.error(`${filename} upload failed: ${err}`));
        });
    };

    var onStdout = function(data) {
        var lines = data.toString().split('\n'),
            result = [],
            cmdStart;

        // Check for commands...
        for (var i = 0; i < lines.length; i++) {
            cmdStart = lines[i].indexOf(COMMAND_PREFIX);
            if (cmdStart !== -1 && lines[i].indexOf(IMAGE) !== -1) {
                uploadImage(lines[i]);
            } else {
                result.push(lines[i]);
            }
        }

        process.stdout.write(result.join('\n'));
    };

    // Run 'th init.lua' and merge the stdout, stderr
    var job = spawn('th', ['init.lua']);
    job.stdout.on('data', onStdout);
    job.stderr.on('data', data => process.stdout.write(data));
    job.on('close', code => {
        exitCode = code;
        log('script finished w/ exit code:', code);
        checkFinished();
    });
});
