-- Instantiate the deepforge object
deepforge = {}

function deepforge.initialize()
    require 'nn'
    require 'rnn'
    require './classes/init'
    require './custom-layers'
end

function deepforge.id()
    if __deepforge_id == nil then
        __deepforge_id = 0
    end
    __deepforge_id = __deepforge_id + 1
    return __deepforge_id
end

function deepforge._cmd(...)
    local cmd = '<%= START_CMD %>'
    local arg = {...}
    local n = #arg
    for i=1,n do
        cmd = cmd .. ' ' .. tostring(arg[i])
    end
    print(cmd .. ' ')  -- guarantee ends w/ space
end

-- Graph support
Graph = torch.class('deepforge.Graph')

function Graph:__init(name)
    self.id = deepforge.id()
    self.name = name
    deepforge._cmd('<%= GRAPH_CREATE %>', self.id, name)
end

_Line = torch.class('deepforge._Line')

function _Line:__init(graphId, name, opts)
    self.id = deepforge.id()
    self.name = name
    deepforge._cmd('<%= GRAPH_CREATE_LINE %>', graphId, self.id, name)
end

function _Line:add(x, y)
    assert(type(x) == "number" and type(y) == "number", "adding point (" .. tostring(x) .. ", " .. tostring(y) .. ") to " .. self.name .. " failed: expected (number, number)")
    deepforge._cmd('<%= GRAPH_PLOT %>', self.id, x, y)
end

function Graph:line(name, opts)
    return deepforge._Line(self.id, name, opts)
end

function Graph:xlabel(name)
    deepforge._cmd('<%= GRAPH_LABEL_AXIS.X %>', self.id, name)
end

function Graph:ylabel(name)
    deepforge._cmd('<%= GRAPH_LABEL_AXIS.Y %>', self.id, name)
end

-- Image support
local function saveImage(name, tensor)
    require 'image'
    require 'paths'

    -- save it in the tmp directory
    local filename = name .. '.png'
    local path = paths.concat('metadata', filename)

    if paths.dir('metadata') == nil then
       paths.mkdir('metadata')
    end

    image.save(path, tensor)
end

function deepforge.image(name, tensor)
    saveImage(name, tensor)
    deepforge._cmd("<%= IMAGE.BASIC %>", deepforge.id(), name)
end

Image = torch.class('deepforge.Image')
function Image:__init(name, tensor)
    self.id = deepforge.id()
    self.name = name

    if tensor ~= nil then
        saveImage(name, tensor)
        deepforge._cmd('<%= IMAGE.CREATE %>', self.id, self.name)
    end
end

function Image:update(tensor)
    saveImage(self.name, tensor)
    deepforge._cmd('<%= IMAGE.UPDATE %>', self.id, self.name)
end

function Image:title(name)
    self.name = name
    deepforge._cmd('<%= IMAGE.NAME %>', self.id, self.name)
end

return deepforge
