/*globals define, $*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 0.1.0 from webgme on Wed Dec 23 2015 11:31:06 GMT-0600 (CST).
 */

define([
    'js/Utils/ComponentSettings',
    'text!./RootViz.html',
    'text!./Card.html.ejs',
    'underscore',
    'css!./styles/RootVizWidget.css'
], function (
    ComponentSettings,
    RootVizHtml,
    CardTplTxt,
    _
) {
    'use strict';

    var RootVizWidget,
        NodeTpl = _.template(CardTplTxt),
        WIDGET_CLASS = 'root-viz';

    RootVizWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this.$el = container;

        // Load the component settings
        this._config = [];
        ComponentSettings.resolveWithWebGMEGlobal(this._config, this.getComponentId());
        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    RootVizWidget.prototype.getComponentId = function() {
        return 'RootViz';
    };

    RootVizWidget.prototype._initialize = function () {
        // create the whitelist
        this.validNodes = {};
        this._config.nodes.forEach(node => this.validNodes[node.nodeId] = node);

        // set widget class and set up the container
        this.$el.addClass(WIDGET_CLASS);
        this.$container = $(RootVizHtml);
        this.$el.append(this.$container);
    };

    RootVizWidget.prototype.onWidgetContainerResize = function () {};

    // Adding/Removing/Updating items
    RootVizWidget.prototype.addNode = function (desc) {
        if (desc) {
            var node = this.validNodes[desc.id];

            if (node) {
                _.extend(desc, node);
                desc.title = desc.title || desc.name;
                this.addPanel(desc);
            }
        }
    };

    RootVizWidget.prototype.addPanel = function (desc) {
        var html = $(NodeTpl(desc));

        // Create the html from template
        if (this.nodes[desc.id]) {
            this.removeNode(desc.id);
        }

        // Create the html from template
        this.$container.append(html);
        html.on('click', () => {
            this.onNodeClick(desc.id);
            event.stopPropagation();
            event.preventDefault();
        });

        this.nodes[desc.id] = html;
    };

    RootVizWidget.prototype.removeNode = function (gmeId) {
        if (this.nodes[gmeId]) {
            this.nodes[gmeId].remove();
            delete this.nodes[gmeId];
        }
    };

    RootVizWidget.prototype.updateNode = function (desc) {
        this.addNode(desc);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    RootVizWidget.prototype.destroy = function () {
    };

    RootVizWidget.prototype.onActivate = function () {
    };

    RootVizWidget.prototype.onDeactivate = function () {
    };

    return RootVizWidget;
});
