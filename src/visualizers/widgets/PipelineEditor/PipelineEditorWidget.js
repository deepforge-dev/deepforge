/*globals define*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu May 19 2016 14:04:47 GMT-0500 (CDT).
 */

define([
    'widgets/EasyDAG/EasyDAGWidget',
    './OperationNode',
    'underscore',
    'css!./styles/PipelineEditorWidget.css'
], function (
    EasyDAGWidget,
    OperationNode,
    _
) {
    'use strict';

    var PipelineEditorWidget,
        WIDGET_CLASS = 'pipeline-editor';

    PipelineEditorWidget = function (logger, container) {
        EasyDAGWidget.call(this, logger, container);
        this.$el.addClass(WIDGET_CLASS);
        this.portIdToNode = {};
    };

    _.extend(PipelineEditorWidget.prototype, EasyDAGWidget.prototype);
    PipelineEditorWidget.prototype.ItemClass = OperationNode;

    //////////////////// Port Support ////////////////////
    PipelineEditorWidget.prototype.addPort = function(desc) {
        this.items[desc.nodeId].addPort(desc);
        this.portIdToNode[desc.id] = desc.nodeId;
        this.refreshUI();
    };

    PipelineEditorWidget.prototype.updatePort = function(desc) {
        this.items[desc.nodeId].updatePort(desc);
        this.refreshUI();
    };

    PipelineEditorWidget.prototype.removeNode = function(gmeId) {
        if (this.portIdToNode.hasOwnProperty(gmeId)) {
            this.removePort(gmeId);
        } else {
            EasyDAGWidget.prototype.removeNode.call(this, gmeId);
        }
    };

    PipelineEditorWidget.prototype.removePort = function(portId) {
        var nodeId = this.portIdToNode[portId];
        if (this.items[nodeId]) {
            this.items[nodeId].removePort(portId);
            this.refreshUI();
        }
    };

    // Change the default decorator to show the inputs and outputs as ports
    // when expanded
    // TODO

    // Also, render the connections so they connect operations using the ports
    // (if the ports are rendered)
    // TODO

    //////////////////// Action Overrides ////////////////////

    PipelineEditorWidget.prototype.onAddItemSelected = function(item, selected) {
        this.createConnectedNode(item.id, selected.id);
    };

    //PipelineEditorWidget.prototype.createNodeAfter = function(srcId, type) {
        //// Figure out the valid input and output port pairing(s)
        //// TODO

        //// If none, error!
        //// TODO

        //// If one, continue
        //// TODO

        //// If many, prompt the user about the input/output
        //// TODO
    //};
    return PipelineEditorWidget;
});
