/*globals define */
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue May 31 2016 09:16:24 GMT-0500 (CDT).
 */

define([
    'widgets/EasyDAG/EasyDAGWidget',
    'widgets/EasyDAG/AddNodeDialog',
    './SelectionManager',
    './Item',
    'underscore',
    'css!./styles/OperationInterfaceEditorWidget.css'
], function (
    EasyDAG,
    AddNodeDialog,
    SelectionManager,
    Item,
    _
) {
    'use strict';

    var OperationInterfaceEditorWidget,
        WIDGET_CLASS = 'operation-interface-editor';

    OperationInterfaceEditorWidget = function (logger, container) {
        EasyDAG.call(this, logger, container);
    };

    _.extend(OperationInterfaceEditorWidget.prototype, EasyDAG.prototype);

    OperationInterfaceEditorWidget.prototype.SelectionManager = SelectionManager;
    OperationInterfaceEditorWidget.prototype.ItemClass = Item;
    OperationInterfaceEditorWidget.prototype.setupItemCallbacks = function() {
        EasyDAG.prototype.setupItemCallbacks.call(this);
        // Add ptr rename callback
        this.ItemClass.prototype.changePtrName = (from, to) => this.changePtrName(from, to);

    };

    OperationInterfaceEditorWidget.prototype.onAddItemSelected = function(selected, isInput) {
        this.createConnectedNode(selected.node.id, isInput);
    };

    OperationInterfaceEditorWidget.prototype.onAddButtonClicked = function(item, isInput) {
        var successorPairs = this.getValidSuccessorNodes(item.id),
            successor = successorPairs[0];

        if (successorPairs.length > 1) {
            // Create the modal view with all possible subsequent nodes
            var dialog = new AddNodeDialog(),
                title = this._getAddSuccessorTitle(item);

            dialog.show(title, successorPairs);
            dialog.onSelect = pair => {
                if (pair) {
                    this.onAddItemSelected(pair, isInput);
                }
            };
        } else if (successor) {
            this.onAddItemSelected(successor, isInput);
        }
    };

    OperationInterfaceEditorWidget.prototype.onDeactivate = function() {
        EasyDAG.prototype.onDeactivate.call(this);
        this.active = true;  // keep refreshing the screen -> it is always visible
    };

    OperationInterfaceEditorWidget.prototype.onAddRefClicked = function() {
        var refs = this.allValidReferences();

        // Get all valid references
        if (refs.length > 1) {
            // Create the modal view with all possible subsequent nodes
            var dialog = new AddNodeDialog();

            dialog.show(null, refs);
            dialog.onSelect = selected => {
                if (selected) {
                    this.onAddRefSelected(selected);
                }
            };
        } else if (refs[0]) {
            this.onAddRefSelected(refs[0]);
        }
    };

    OperationInterfaceEditorWidget.prototype.onAddRefSelected = function(target) {
        this.addRefTo(target.node.id);
    };

    OperationInterfaceEditorWidget.prototype.removeItem = function(item) {
        if (item.desc.isPointer) {
            this.removePtr(item.name);
        } else {
            this.removeSubtreeAt(item.id);
        }
    };

    return OperationInterfaceEditorWidget;
});
