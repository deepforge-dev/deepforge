{
  "version": 3,
  "file": "TrainDashboard.css",
  "sources": [
    "TrainDashboard.svelte"
  ],
  "sourcesContent": [
    "<script>\n  const EMPTY_FN_SCHEMA = {name: '', arguments: []};\n  let startTrainLabel = 'Train';\n  let Plotly = null;\n\tlet batchSize = 32;\n\tlet epochs = 50;\n\tlet validation = 0.1;\n  let optimizer = EMPTY_FN_SCHEMA;\n  let optimizers = [];\n  let loss = EMPTY_FN_SCHEMA;\n  let categorizedLosses = [];\n  let architectures = [];\n  let architecture;\n  let artifacts = [];\n  let dataset;\n  let models = [];\n  let displayedModel;\n  let accuracyPlot;\n  $: plotData = displayedModel && displayedModel.plotData;\n  let eventElement;\n\n  function decorateSchemas(schemas) {\n    let index = 1;\n    schemas.losses.concat(schemas.optimizers).forEach(fn => {\n      fn.arguments = fn.arguments\n        .filter(arg => arg.name !== 'name')\n        .map(arg => {\n          if (arg.name.includes('reduction')) {\n            arg.type = 'enum';\n            arg.options = schemas.reductions;\n          } else {\n            arg.type = typeof(arg.default);\n          }\n          arg.value = arg.default;\n          arg.id = `arg${index++}`;\n          return arg;\n        })\n        .sort((arg1, arg2) => {\n          const [num1, num2] = [arg1, arg2]\n            .map(arg => arg.type === 'boolean' ? 1 : 0)\n          return num1 - num2;\n        });\n    });\n  }\n\n  export function initialize(plotly, schemas) {\n    decorateSchemas(schemas);\n    optimizers = schemas.optimizers;\n    optimizer = optimizers[0];\n    const lossesByCategory = {};\n    schemas.losses.forEach(loss => {\n      if (!lossesByCategory[loss.category]) {\n        lossesByCategory[loss.category] = [];\n      }\n      lossesByCategory[loss.category].push(loss);\n    });\n\n    categorizedLosses = Object.entries(lossesByCategory);\n    loss = schemas.losses[0];\n    Plotly = plotly;\n    Plotly.newPlot(accuracyPlot);\n  }\n\n  function onTrainClicked() {\n    const event = new CustomEvent('onTrainClicked');\n    eventElement.dispatchEvent(event);\n  }\n\n  function showLossInfo() {\n    const category = loss.category.toLowerCase().replace(/ /g, '_');\n    const name = `${loss.name.toLowerCase()}-class`;\n    const url = `https://keras.io/api/losses/${category}/#${name}/`;\n    window.open(url, '_blank');\n  }\n\n  function showModelInfo(model) {\n    const event = new CustomEvent('showModelInfo', {detail: model});\n    eventElement.dispatchEvent(event);\n  }\n\n  function showOptimInfo() {\n    const url = `https://keras.io/api/optimizers/${optimizer.name.toLowerCase()}/`;\n    window.open(url, '_blank');\n  }\n\n  export function addModel(model) {\n    models = models.concat(model);\n    if (!displayedModel) {\n      displayedModel = model;\n    }\n  }\n\n  export function events() {\n      return eventElement;\n  }\n\n  function saveModel(model) {\n    const event = new CustomEvent('saveModel', {detail: model});\n    eventElement.dispatchEvent(event);\n  }\n\n  function setDisplayedModel(newModel) {\n    displayedModel = newModel;\n\n    if (displayedModel.config) {\n      architecture = displayedModel.config.architecture;\n      dataset = displayedModel.config.dataset;\n      batchSize = displayedModel.config.batchSize;\n      validation = displayedModel.config.validation;\n      optimizer = displayedModel.config.optimizer;\n      epochs = displayedModel.config.epochs;\n      loss = displayedModel.config.loss;\n    }\n    if (Plotly) {\n      Plotly.react(accuracyPlot, displayedModel.plotData);\n    }\n  }\n\n  export function setModelState(modelID, state, info) {\n    const model = models.find(model => model.id === modelID);\n    model.state = state;\n    model.info = info;\n    models = models;\n\n    const isTrainingComplete = !state;\n    if (isTrainingComplete) {\n      startTrainLabel = 'Train';\n    } else if (state.startsWith('Training')){\n      startTrainLabel = 'Restart';\n    }\n  }\n\n  export function setPlotData(modelID, newData) {\n    const model = models.find(model => model.id === modelID);\n    model.plotData = newData;\n    if (model === displayedModel) {\n      setDisplayedModel(model);\n    }\n  }\n\n  export function addArtifact(arch) {\n    artifacts = artifacts.concat(arch);\n    if (!dataset) {\n      dataset = artifacts[0];\n    }\n  }\n\n  export function updateArtifact(desc) {\n    artifacts = artifacts.map(arch => {\n      if (arch.id === desc.id) {\n        return desc;\n      }\n      return arch;\n    });\n  }\n\n  export function removeArtifact(id) {\n    artifacts = artifacts.filter(arch => arch.id !== id);\n    if (dataset && dataset.id === id) {\n      dataset = artifacts[0];\n    }\n  }\n\n  export function addArchitecture(arch) {\n    architectures = architectures.concat(arch);\n    if (!architecture) {\n      architecture = architectures[0];\n    }\n  }\n\n  export function updateArchitecture(desc) {\n    architectures = architectures.map(arch => {\n      if (arch.id === desc.id) {\n        return desc;\n      }\n      return arch;\n    });\n  }\n\n  export function removeArchitecture(id) {\n    architectures = architectures.filter(arch => arch.id !== id);\n    if (architecture && architecture.id === id) {\n      architecture = architectures[0];\n    }\n  }\n\n  function set(info) {\n    loss = info.loss || loss;\n    optimizer = info.optimizer || optimizer;\n    architectures = info.architectures || architectures;\n  }\n\n  export function data() {\n    return {\n      architecture,\n      dataset,\n      batchSize,\n      validation,\n      optimizer,\n      epochs,\n      loss,\n    };\n  }\n</script>\n\n<main bind:this={eventElement}>\n  <div class=\"row\">\n    <div class=\"col-xs-12 col-sm-12 col-md-4 col-lg-3\">\n      <h3>Training Parameters</h3>\n      <div class=\"well\" style=\"padding-top: 5px\">\n        <form>\n          <h5 style=\"text-align: left\">General</h5>\n          <div class=\"form-group\">\n            <label for=\"dataset\">Training Data: </label>\n            <select id=\"dataset\" bind:value={dataset}>\n              {#each artifacts as data}\n                <option value={data}>{data.name}</option>\n              {/each}\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"arch\">Architecture: </label>\n            <select id=\"arch\" bind:value={architecture}>\n              {#each architectures as arch}\n                <option value={arch}>{arch.name}</option>\n              {/each}\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"batchSize\">Batch Size</label>\n            <input id=\"batchSize\" bind:value={batchSize} type=\"number\"/>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"epochs\">Epochs</label>\n            <input id=\"epochs\" bind:value={epochs} type=\"number\"/>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"validation\">Validation Split</label>\n            <input id=\"validation\" bind:value={validation} type=\"number\"/>\n          </div>\n          <hr style=\"border-top: 1px solid #aaa\">\n          <h5 style=\"text-align: left\">Loss</h5>\n          <div class=\"form-group\">\n            <label for=\"loss\">Loss Function: </label>\n            <select id=\"loss\" bind:value={loss}>\n              {#each categorizedLosses as cat}\n                <optgroup label={cat[0]}>\n                {#each cat[1] as lf}\n                  <option value={lf}>{lf.name}</option>\n                {/each}\n                </optgroup>\n              {/each}\n            </select>\n            <span on:click|stopPropagation|preventDefault={showLossInfo} class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n          </div>\n          {#each loss.arguments as arg}\n            <div class=\"form-group\">\n              {#if arg.type === 'string'}\n                <label for=\"{arg.id}\">{arg.name}</label>\n                <input id=\"{arg.id}\" bind:value={arg.value} type=\"text\"/>\n              {:else if arg.type === 'boolean'}\n                <input id=\"{arg.id}\" bind:checked={arg.value} type=\"checkbox\"/>\n                <label for=\"{arg.id}\">{arg.name}</label>\n              {:else if arg.type === 'enum'}\n                <label for=\"{arg.id}\">{arg.name}</label>\n                <select id=\"{arg.id}\" bind:value={arg.value}>\n                  {#each arg.options as option}\n                    <option value={option}>{option}</option>\n                  {/each}\n                </select>\n              {:else}\n                <label for=\"{arg.id}\">{arg.name}</label>\n                <input id=\"{arg.id}\" bind:value={arg.value} type=\"number\"/>\n              {/if}\n            </div>\n          {/each}\n          <hr style=\"border-top: 1px solid #aaa\">\n          <h5 style=\"text-align: left\">Optimization</h5>\n          <div class=\"form-group\">\n            <label for=\"optimizer\">Optimizer: </label>\n            <select id=\"optimizer\" bind:value={optimizer}>\n              {#each optimizers as optim}\n                <option value={optim}>{optim.name}</option>\n              {/each}\n            </select>\n            <span on:click|stopPropagation|preventDefault={showOptimInfo} class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n          </div>\n          {#each optimizer.arguments as arg}\n            <div class=\"form-group\">\n              {#if arg.type === 'string'}\n                <label for=\"{arg.id}\">{arg.name}</label>\n                <input id=\"{arg.id}\" bind:value={arg.value} type=\"text\"/>\n              {:else if arg.type === 'boolean'}\n                <input id=\"{arg.id}\" bind:checked={arg.value} type=\"checkbox\"/>\n                <label for=\"{arg.id}\">{arg.name}</label>\n              {:else}\n                <label for=\"{arg.id}\">{arg.name}</label>\n                <input id=\"{arg.id}\" bind:value={arg.value} type=\"number\"/>\n              {/if}\n            </div>\n          {/each}\n        </form>\n        <button on:click|preventDefault|stopPropagation={onTrainClicked} type=\"button\" class=\"btn btn-{startTrainLabel === 'Train' ? 'primary' : 'warning'}\">{startTrainLabel}</button>\n      </div>\n    </div>\n    <div class=\"col-xs-12 col-sm-12 col-md-6 col-lg-6 plot-container\" bind:this={accuracyPlot}></div>\n    <div class=\"col-xs-12 col-sm-12 col-md-2 col-lg-2\">\n      <h4>Trained Models</h4>\n      <div class=\"list-group\">\n          {#if models.length > 0}\n            {#each models as model}\n              <div on:click|preventDefault|stopPropagation={() => setDisplayedModel(model)}\n                class=\"list-group-item {displayedModel === model ? 'active' : ''}\"\n              >\n                <span\n                  contenteditable=true\n                  bind:innerHTML={model.name}\n                  style=\"cursor: text;\"></span>\n                {#if model.state}\n                  <span\n                    on:click|preventDefault|stopPropagation={() => showModelInfo(model)}\n                    class=\"pull-right\" style=\"color: #888; font-style: italic;\"> {model.state[0].toUpperCase() + model.state.substring(1)}</span>\n                {:else}\n                  <span\n                    on:click|preventDefault|stopPropagation={() => saveModel(model)}\n                    class=\"glyphicon glyphicon-floppy-disk pull-right\" aria-hidden=\"true\"\n                  ></span>\n                {/if}\n              </div>\n            {/each}\n          {:else}\n            <div class=\"list-group-item\" style=\"font-style: italic; color: #888\">No Trained Models</div>\n          {/if}\n      <div>\n    </div>\n  </div>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n  .row {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: space-around;\n  }\n\n  .config-panel {\n    flex-grow: 1;\n    padding: 10px;\n  }\n\n  .output-panel {\n    flex-grow: 1;\n    padding: 10px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAmVE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,GAAG,CAAC,IAAI,CACnB,eAAe,CAAE,YAAY,AAC/B,CAAC"
}