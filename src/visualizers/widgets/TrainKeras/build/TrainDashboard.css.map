{
  "version": 3,
  "file": "TrainDashboard.css",
  "sources": [
    "../../../../../TrainDashboard.svelte"
  ],
  "sourcesContent": [
    "<script>\n  const EMPTY_FN_SCHEMA = {name: '', arguments: []};\n  let Plotly = null;\n\tlet batchSize = 32;\n\tlet epochs = 50;\n\tlet validation = 0.1;\n\tlet lr = 0.005;\n  let optimizer = EMPTY_FN_SCHEMA;\n  let optimizers = [];\n  let loss = EMPTY_FN_SCHEMA;\n  let categorizedLosses = [];\n  let architectures = [];\n  let architecture;\n  let accuracyPlot;\n  const accuracyData = [\n    {\n      name: 'Training',\n      type: 'scatter',\n      //x: [0, 1, 2, 3],\n      y: [0.1, 0.15, 0.2, 0.25]\n    },\n    {\n      name: 'Validation',\n      type: 'scatter',\n      //x: [0, 1, 2, 3],\n      y: [0.1, 0.12, 0.18, 0.20]\n    },\n  ];\n  const layout = {title: 'Accuracy'};\n\n  function decorateSchemas(schemas) {\n    schemas.losses.concat(schemas.optimizers).forEach(fn => {\n      fn.arguments = fn.arguments\n        .filter(arg => arg.name !== 'name')\n        .map(arg => {\n          if (arg.default === undefined) {\n            console.log(arg);\n            throw new Error('no default provided');\n          }\n          arg.type = typeof(arg.default);\n          arg.value = arg.default;\n          return arg;\n        });\n    });\n  }\n\n  export function initialize(plotly, schemas) {\n    decorateSchemas(schemas);\n    optimizers = schemas.optimizers;\n    optimizer = optimizers[0];\n    const lossesByCategory = {};\n    schemas.losses.forEach(loss => {\n      if (!lossesByCategory[loss.category]) {\n        lossesByCategory[loss.category] = [];\n      }\n      lossesByCategory[loss.category].push(loss);\n    });\n\n    categorizedLosses = Object.entries(lossesByCategory);\n    loss = schemas.losses[0];\n    Plotly = plotly;\n    if (accuracyData) {\n      Plotly.newPlot(accuracyPlot, accuracyData, layout);\n    }\n  }\n\n  export function addArchitecture(arch) {\n    architectures = architectures.concat(arch);\n  }\n\n  export function updateArchitecture(desc) {\n    architectures = architectures.map(arch => {\n      if (arch.id === desc.id) {\n        return desc;\n      }\n      return arch;\n    });\n  }\n\n  export function removeArchitecture(id) {\n    architectures = architectures.filter(arch => arch.id !== id);\n  }\n\n  /*setTimeout(() => record(0.5), 2000);*/\n  /*export function record(acc, loss) {*/\n    /*accuracyData.forEach(d => {*/\n      /*//d.x.push(d.x.length);*/\n        /*d.y.push(acc);*/\n    /*});*/\n    /*const yData = accuracyData[0].y;*/\n    /*const xmin = 0;*/\n    /*const xmax = yData.length;*/\n    /*const ymin = Math.min(...yData);*/\n    /*const ymax = Math.max(...yData);*/\n\n    /*Plotly.animate(accuracyPlot, {*/\n        /*data: accuracyData.map(d => d.y),*/\n        /*layout: {*/\n          /*xaxis: {range: [xmin, xmax]},*/\n          /*yaxis: {range: [ymin, ymax]},*/\n        /*},*/\n      /*},*/\n      /*{*/\n        /*transition: {*/\n          /*duration: 500,*/\n          /*easing: 'cubic-in-out',*/\n        /*},*/\n        /*frame: {*/\n          /*duration: 500*/\n        /*}*/\n      /*}*/\n    /*);*/\n  /*}*/\n\n  export function set(info) {\n    loss = info.loss || loss;\n    optimizer = info.optimizer || optimizer;\n    architectures = info.architectures || architectures;\n  }\n\n  export function data() {\n    return {\n      batchSize,\n      validation,\n      optimizer,\n      epochs,\n      lr,\n      loss,\n    };\n  }\n</script>\n\n<main>\n\n\n  <div class=\"row\">\n    <div class=\"config-panel\">\n      <h3>Training Parameters</h3>\n      <div class=\"well\">\n        <form>\n          <div class=\"form-group\">\n            <label for=\"arch\">Architecture: </label>\n            <select id=\"arch\" bind:value={architecture}>\n              {#each architectures as arch}\n                <option value={arch.id}>{arch.name}</option>\n              {/each}\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"loss\">Loss Function: </label>\n            <select id=\"loss\" bind:value={loss}>\n              {#each categorizedLosses as cat}\n                <optgroup label={cat[0]}>\n                {#each cat[1] as lf}\n                  <option value={lf}>{lf.name}</option>\n                {/each}\n                </optgroup>\n              {/each}\n            </select>\n            <span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n          </div>\n          {#each loss.arguments as arg}\n            <div class=\"form-group\">\n              {#if arg.type === 'boolean'}\n              {:else if arg.type === 'string'}\n                <label>{arg.name}</label>\n                <input bind:value={arg.value} type=\"text\"/>\n              {:else if arg.type === 'reduction'}\n              {:else}\n                <label>{arg.name}</label>\n                <input bind:value={arg.value} type=\"number\"/>\n              {/if}\n            </div>\n          {/each}\n          <div class=\"form-group\">\n            <label for=\"optimizer\">Optimizer: </label>\n            <select id=\"optimizer\" bind:value={optimizer}>\n              {#each optimizers as optim}\n                <option value={optim}>{optim.name}</option>\n              {/each}\n            </select>\n          </div>\n          {#each optimizer.arguments as arg}\n            <div class=\"form-group\">\n              {#if arg.type === 'boolean'}\n              {:else if arg.type === 'string'}\n                <label>{arg.name}</label>\n                <input bind:value={arg.value} type=\"text\"/>\n              {:else if arg.type === 'reduction'}\n              {:else}\n                <label>{arg.name}</label>\n                <input bind:value={arg.value} type=\"number\"/>\n              {/if}\n            </div>\n          {/each}\n          <div class=\"form-group\">\n            <label>Learning Rate: </label>\n            <input bind:value={lr} type=\"number\"/>\n          </div>\n          <div class=\"form-group\">\n            <label>Batch Size</label>\n            <input bind:value={batchSize} type=\"number\"/>\n          </div>\n          <div class=\"form-group\">\n            <label>Epochs</label>\n            <input bind:value={epochs} type=\"number\"/>\n          </div>\n          <div class=\"form-group\">\n            <label>Validation Split</label>\n            <input bind:value={validation} type=\"number\"/>\n          </div>\n          <!-- TODO: Train button -->\n        </form>\n      </div>\n    </div>\n    <div class=\"plot-container\" bind:this={accuracyPlot} style=\"flex-grow: 4\"></div>\n    <div style=\"display: none;\" class=\"output-panel\">test<!-- TODO --></div>\n  </div>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3ef0;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n  .row {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: space-around;\n  }\n\n  .config-panel {\n    flex-grow: 1;\n    padding: 10px;\n  }\n\n  .output-panel {\n    flex-grow: 1;\n    padding: 10px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA6NE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AASD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,GAAG,CAAC,IAAI,CACnB,eAAe,CAAE,YAAY,AAC/B,CAAC,AAED,aAAa,eAAC,CAAC,AACb,SAAS,CAAE,CAAC,CACZ,OAAO,CAAE,IAAI,AACf,CAAC,AAED,aAAa,eAAC,CAAC,AACb,SAAS,CAAE,CAAC,CACZ,OAAO,CAAE,IAAI,AACf,CAAC"
}