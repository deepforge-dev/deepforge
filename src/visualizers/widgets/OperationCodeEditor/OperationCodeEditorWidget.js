/*globals define */
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed May 18 2016 12:00:46 GMT-0500 (CDT).
 */

define([
    'widgets/TextEditor/TextEditorWidget',
    'underscore',
    'css!./styles/OperationCodeEditorWidget.css'
], function (
    TextEditorWidget,
    _
) {
    'use strict';

    var OperationCodeEditorWidget;
        //WIDGET_CLASS = 'operation-editor';

    OperationCodeEditorWidget = function (logger, container) {
        TextEditorWidget.call(this, logger, container);
        this.lineOffset = 0;
    };

    _.extend(OperationCodeEditorWidget.prototype, TextEditorWidget.prototype);

    OperationCodeEditorWidget.prototype.getHeader = function (desc) {
        // Add comment about the inputs, attributes and references
        var inputs = desc.inputs.map(pair => `-- ${pair[0]} (${pair[1]})`).join('\n'),
            refs = desc.references.map(name => `-- ${name}`).join('\n'),
            outputs,
            header = [
                `-- Editing "${desc.name}" Implementation`
            ];

        if (inputs.length) {
            header.push('--');
            header.push('-- Defined variables:');
            header.push(inputs);
        }
        if (refs) {
            header.push(refs);
        }
        header.push('--');
        header.push('-- The following will be executed when the operation is run:');

        // Add info about outputs
        outputs = desc.outputs.map(pair => `--   ${pair[0]} = <some ${pair[1]}>`)
            .join('\n');

        if (outputs.length) {
            header.push('-- Returning something like:');
            header.push('-- {');
            header.push(outputs);
            header.push('-- }');
        }

        return header.join('\n');
    };

    OperationCodeEditorWidget.prototype.addNode = function () {
        TextEditorWidget.prototype.addNode.apply(this, arguments);
        this.updateOffset();
    };

    OperationCodeEditorWidget.prototype.setLineOffset = function (offset) {
        if (this.lineOffset !== offset) {
            this.lineOffset = offset;
            this.updateOffset();
        }
    };

    OperationCodeEditorWidget.prototype.updateOffset = function () {
        var lines,
            actualOffset;

        lines = this.currentHeader.match(/\n/g);
        actualOffset = this.lineOffset - (lines ? lines.length : 0);
        this.editor.setOption('firstLineNumber', actualOffset);
    };

    return OperationCodeEditorWidget;
});
