/*globals define */
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue May 24 2016 10:15:19 GMT-0500 (CDT).
 */

define([
    'panels/EasyDAG/EasyDAGControl',
    'deepforge/viz/PipelineControl',
    'underscore'
], function (
    EasyDAGControl,
    PipelineControl,
    _
) {

    'use strict';

    var ExecutionViewControl;

    ExecutionViewControl = function (options) {
        EasyDAGControl.call(this, options);
        this.addedNodes = {};
    };

    _.extend(
        ExecutionViewControl.prototype,
        EasyDAGControl.prototype,
        PipelineControl.prototype
    );

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    ExecutionViewControl.prototype.TERRITORY_RULE = {children: 4};
    ExecutionViewControl.prototype.DEFAULT_DECORATOR = 'JobDecorator';

    ExecutionViewControl.prototype.selectedObjectChanged = function(id) {
        EasyDAGControl.prototype.selectedObjectChanged.call(this, id);

        if (this._currentNodeId) {
            var node = this._client.getNode(this._currentNodeId),
                isSnapshot = node.getAttribute('snapshot');

            this._widget.setSnapshot(isSnapshot);
        }
    };

    ExecutionViewControl.prototype._onLoad = function(id) {
        var desc = this._getObjectDescriptor(id);
        if (desc.parentId === this._currentNodeId) {
            this.addedNodes[id] = true;
            EasyDAGControl.prototype._onLoad.call(this, id);
        }
    };

    ExecutionViewControl.prototype._onUnload = function(id) {
        if (this.addedNodes[id] === true) {
            EasyDAGControl.prototype._onUnload.call(this, id);
            delete this.addedNodes[id];
        }
    };

    ExecutionViewControl.prototype._onUpdate = function(id) {
        if (this.addedNodes[id] === true) {
            EasyDAGControl.prototype._onUpdate.call(this, id);
        }
    };

    // Add the connection detection
    return ExecutionViewControl;
});
