/*globals define, WebGMEGlobal */
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue May 24 2016 10:15:19 GMT-0500 (CDT).
 */

define([
    'js/Constants',
    'panels/EasyDAG/EasyDAGControl',
    'deepforge/viz/PipelineControl',
    'underscore'
], function (
    CONSTANTS,
    EasyDAGControl,
    PipelineControl,
    _
) {

    'use strict';

    var ExecutionViewControl;

    ExecutionViewControl = function (options) {
        EasyDAGControl.call(this, options);
        this.addedNodes = {};
        this.originTerritory = {};
        this.originTerritoryId = null;
    };

    _.extend(
        ExecutionViewControl.prototype,
        EasyDAGControl.prototype,
        PipelineControl.prototype
    );

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    ExecutionViewControl.prototype.TERRITORY_RULE = {children: 4};
    ExecutionViewControl.prototype.DEFAULT_DECORATOR = 'JobDecorator';

    ExecutionViewControl.prototype.selectedObjectChanged = function(id) {
        EasyDAGControl.prototype.selectedObjectChanged.call(this, id);

        if (this._currentNodeId) {
            var desc = this.getExecDesc(this._currentNodeId);

            this._widget.setExecutionNode(desc);
            this.originId = desc.originId;

            // Add the originId to the territory and update it!
            if (this.originId) {
                if (this.originTerritoryId) {
                    this._client.removeUI(this.originTerritoryId);
                    this.originTerritory = {};
                }

                this.originTerritory[this.originId] = {children: 0};
                this.originTerritoryId = this._client.addUI(this, events => {
                    var event = events.find(event => event.eid === this.originId);

                    if (!event) {  // no relevant events
                        return;
                    }

                    if (event.etype === CONSTANTS.TERRITORY_EVENT_UNLOAD) {
                        this.originId = null;
                        this._widget.onOriginDeleted();
                    } else {
                        var name = this._client.getNode(this.originId).getAttribute('name');
                        this._widget.setOriginPipeline(name);
                    }
                });
                this._client.updateTerritory(this.originTerritoryId, this.originTerritory);
            } else {
                this._widget.onOriginDeleted();
            }
        }
    };

    ExecutionViewControl.prototype.getExecDesc = function(id) {
        var node = this._client.getNode(id);

        return {
            isSnapshot: node.getAttribute('snapshot'),
            createdAt: node.getAttribute('createdAt'),
            originId: node.getPointer('origin').to
        };
    };

    ExecutionViewControl.prototype._onLoad = function(id) {
        var desc = this._getObjectDescriptor(id);

        if (desc.parentId === this._currentNodeId) {
            this.addedNodes[id] = true;
            EasyDAGControl.prototype._onLoad.call(this, id);
        }
    };

    ExecutionViewControl.prototype._onUnload = function(id) {
        if (this.addedNodes[id] === true) {
            EasyDAGControl.prototype._onUnload.call(this, id);
            delete this.addedNodes[id];
        }
    };

    ExecutionViewControl.prototype._onUpdate = function(id) {
        if (this.addedNodes[id] === true) {
            EasyDAGControl.prototype._onUpdate.call(this, id);
        }
    };

    ExecutionViewControl.prototype.onOriginClicked = function() {
        if (this.originId) {
            WebGMEGlobal.State.registerActiveObject(this.originId);
        }
    };

    return ExecutionViewControl;
});
