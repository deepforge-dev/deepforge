/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Jul 27 2020 14:55:57 GMT-0500 (Central Daylight Time).
 */

define([
    'js/PanelBase/PanelBaseWithHeader',
    'panels/InteractiveEditor/InteractiveEditorPanel',
    'widgets/TrainKeras/TrainKerasWidget',
    './TrainKerasControl',
], function (
    PanelBaseWithHeader,
    InteractiveEditorPanel,
    TrainKerasWidget,
    TrainKerasControl,
) {
    'use strict';

    class TrainKerasPanel extends InteractiveEditorPanel {
        constructor(layoutManager, params) {
            const config = {
                name: 'TrainKeras',
                Control: TrainKerasControl,
                Widget: TrainKerasWidget,
            };
            super(config, params);

            this.logger.debug('ctor finished');
        }

        /* OVERRIDE FROM WIDGET-WITH-HEADER */
        /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
        onReadOnlyChanged(isReadOnly) {
            //apply parent's onReadOnlyChanged
            PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);

        }

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        destroy() {
            this.control.destroy();
            this.widget.destroy();

            PanelBaseWithHeader.prototype.destroy.call(this);
            WebGMEGlobal.KeyboardManager.setListener(undefined);
            WebGMEGlobal.Toolbar.refresh();
        }

        onActivate() {
            this.widget.onActivate();
            this.control.onActivate();
            WebGMEGlobal.KeyboardManager.setListener(this.widget);
            WebGMEGlobal.Toolbar.refresh();
        }

        onDeactivate() {
            this.widget.onDeactivate();
            this.control.onDeactivate();
            WebGMEGlobal.KeyboardManager.setListener(undefined);
            WebGMEGlobal.Toolbar.refresh();
        }
    }

    return TrainKerasPanel;
});
